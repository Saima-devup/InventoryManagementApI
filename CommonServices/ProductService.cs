// Code generated by DevUp technologies, 02/08/2024 14:36:01
using System;
using System.Collections.Generic;
using System.Data.Entity.Validation;
using System.Reflection;
using System.Threading.Tasks;
using CommonInterfaces;
using CommonInterfaces.BasicDataServices;
using CommonServices.Mappers;
using InventoryManagementDAL;
using InventoryManagementDAL.Container;

namespace CommonServices
{
	/// <summary>
    /// This is the service class/layer used to separate the business logic of an application from the presentation or user interface layer
	/// This service layer is accessed by the presentation layer through an API, and is used to perform tasks such as 
	/// retrieving or updating data, or performing calculations. 
	/// By separating the business logic from the presentation layer, the service layer can help to make the application more modular and easier to maintain.
	/// Instance of this class is created at statup, added to the service either as singleton or scoped object and then injected and used by controllers
    /// </summary>
    public class ProductService : IProductService
    {
        IChangeTrackManager _changeTracker;
        IDataCryptoProvider _cryptoProvider;
        string _userId;

        public ProductService(IChangeTrackManager changeTracker = null,
            IDataCryptoProvider cryptoProvider = null,
            string userId = null)
        {
            _changeTracker = changeTracker;
            _cryptoProvider = cryptoProvider;
            _userId = userId;

            // TODO: plz implement and use method below in case you want to perform data encryption, or please contact DevUp for more support on this
            //_cryptoProvider.Configure();
        }
        public Task<List<ProductDTO>> GetAll()
        {
            try
            {
                List<Product> products = IOCContainer.Instance.ProductRepository.GetAll();
                // TODO: plz implement and use method below in case you want to perform data encryption, or please contact DevUp for more support on this
                //if (_cryptoProvider != null)
                //    products.ForEach(product => _cryptoProvider.DecryptEntity<Product>(product, CryptoType.InTable));
                List<ProductDTO> productsDTO = MapperService.MapperInstance.Map<List<ProductDTO>>(products);
				
				return Task.FromResult(productsDTO);
            }
            catch (DbEntityValidationException ex)
            {
                // Retrieve the error messages as a list of strings.
                var errorMessages = ex.EntityValidationErrors
                        .SelectMany(x => x.ValidationErrors)
                        .Select(x => x.ErrorMessage);

                // Join the list to a single string.
                var fullErrorMessage = string.Join("; ", errorMessages);

                // Combine the original exception message with the new one.
                var exceptionMessage = string.Concat(ex.Message, " The validation errors are: ", fullErrorMessage);

                string errorMessage = string.Format("{0}:{1}, EntityValidation Errors occured, {2}",
                    MethodBase.GetCurrentMethod().DeclaringType.Name,
                    MethodBase.GetCurrentMethod().Name,
                    exceptionMessage);

                throw new Exception(errorMessage, ex);
            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("{0}:{1}, Error occured, object:{2}, {3}",
                    MethodBase.GetCurrentMethod().DeclaringType.Name,
                    MethodBase.GetCurrentMethod().Name,
                    0,
                    ex.Message);
                throw new Exception(errorMessage, ex);
            }
        }
		
		public Task<List<ProductDTO>> GetByFilter(ProductFilterDTO productFilter)
        {
            try
            {
                if (productFilter == null)
                        throw new ArgumentNullException("Please provide a valid Product filter to persists, the object passed is null");

					ProductFilter filter = MapperService.MapperInstance.Map<ProductFilter>(productFilter);
                    List<Product> products = IOCContainer.Instance.ProductRepository.GetByFilter(filter);
	                // TODO: plz implement and use method below in case you want to perform data encryption, or please contact DevUp for more support on this
	                //if (_cryptoProvider != null)
	                //    products.ForEach(product => _cryptoProvider.DecryptEntity<Product>(product, CryptoType.InTable));
                    List<ProductDTO> productsDTO = MapperService.MapperInstance.Map<List<ProductDTO>>(products);

                    return Task.FromResult(productsDTO);
            }
            catch (DbEntityValidationException ex)
            {
                // Retrieve the error messages as a list of strings.
                var errorMessages = ex.EntityValidationErrors
                        .SelectMany(x => x.ValidationErrors)
                        .Select(x => x.ErrorMessage);

                // Join the list to a single string.
                var fullErrorMessage = string.Join("; ", errorMessages);

                // Combine the original exception message with the new one.
                var exceptionMessage = string.Concat(ex.Message, " The validation errors are: ", fullErrorMessage);

                string errorMessage = string.Format("{0}:{1}, EntityValidation Errors occured, {2}",
                    MethodBase.GetCurrentMethod().DeclaringType.Name,
                    MethodBase.GetCurrentMethod().Name,
                    exceptionMessage);

                throw new Exception(errorMessage, ex);
            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("{0}:{1}, Error occured, object:{2}, {3}",
                    MethodBase.GetCurrentMethod().DeclaringType.Name,
                    MethodBase.GetCurrentMethod().Name,
                    0,
                    ex.Message);
                throw new Exception(errorMessage, ex);
            }
        }

        public Task<ProductDTO> GetById(long id)
        {
            
            try
            {
                Product product = IOCContainer.Instance.ProductRepository.GetById(id);
                // TODO: plz implement and use method below in case you want to perform data encryption, or please contact DevUp for more support on this
                //if (_cryptoProvider != null)
                //    _cryptoProvider.DecryptEntity<Product>(product, CryptoType.InTable);
                ProductDTO productDTO = MapperService.MapperInstance.Map<ProductDTO>(product);
                return Task.FromResult(productDTO);
            }
            catch (DbEntityValidationException ex)
            {
                // Retrieve the error messages as a list of strings.
                var errorMessages = ex.EntityValidationErrors
                        .SelectMany(x => x.ValidationErrors)
                        .Select(x => x.ErrorMessage);

                // Join the list to a single string.
                var fullErrorMessage = string.Join("; ", errorMessages);

                // Combine the original exception message with the new one.
                var exceptionMessage = string.Concat(ex.Message, " The validation errors are: ", fullErrorMessage);

                string errorMessage = string.Format("{0}:{1}, EntityValidation Errors occured, {2}",
                    MethodBase.GetCurrentMethod().DeclaringType.Name,
                    MethodBase.GetCurrentMethod().Name,
                    exceptionMessage);

                throw new Exception(errorMessage, ex);
            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("{0}:{1}, Error occured, object:{2}, {3}",
                    MethodBase.GetCurrentMethod().DeclaringType.Name,
                    MethodBase.GetCurrentMethod().Name,
                    id,
                    ex.Message);
                throw new Exception(errorMessage, ex);
            }
        }
        public Task<long> CreateGetId(ProductDTO dataItem)
        {
			try
			{
				if (dataItem == null)
					throw new ArgumentNullException("Please provide a valid Product object to persists, the object passed is null");

				Product product = MapperService.MapperInstance.Map<Product>(dataItem);
                // TODO: plz implement and use method below in case you want to perform data encryption, or please contact DevUp for more support on this
                //if (_cryptoProvider!=null)
                //    _cryptoProvider.EncryptEntity<Product>(product, CryptoType.InTable);

                // now store the object after applying data security
				IOCContainer.Instance.ProductRepository.Create(product);
                // TODO: plz implement and use method below in case you want to add change tracking feature to your API, or please contact DevUp for more support on this
                //if (_changeTracker != null)
                //{
                //    Dictionary<string, object> data = new Dictionary<string, object>();
                //    data.Add("User", _userId);
                //    _changeTracker.SaveChange<ProductDTO>(dataItem, dataItem.Id.ToString(), ChangeType.Created, data);
                //}
				return Task.FromResult(product.Id);
			}
			catch (DbEntityValidationException ex)
            {
                // Retrieve the error messages as a list of strings.
                var errorMessages = ex.EntityValidationErrors
                        .SelectMany(x => x.ValidationErrors)
                        .Select(x => x.ErrorMessage);

                // Join the list to a single string.
                var fullErrorMessage = string.Join("; ", errorMessages);

                // Combine the original exception message with the new one.
                var exceptionMessage = string.Concat(ex.Message, " The validation errors are: ", fullErrorMessage);

                string errorMessage = string.Format("{0}:{1}, EntityValidation Errors occured, {2}",
                    MethodBase.GetCurrentMethod().DeclaringType.Name,
                    MethodBase.GetCurrentMethod().Name,
                    exceptionMessage);

                throw new Exception(errorMessage, ex);
            }
			catch (Exception ex)
			{
				string errorMessage = string.Format("{0}:{1}, Error occured, object:{2}, {3}",
					MethodBase.GetCurrentMethod().DeclaringType.Name,
					MethodBase.GetCurrentMethod().Name,
					dataItem.Id,
					ex.Message);
				throw new Exception(errorMessage, ex);
			}
        }
		public Task<bool> Create(ProductDTO dataItem)
        {
			try
			{
				if (dataItem == null)
					throw new ArgumentNullException("Please provide a valid Product object to persists, the object passed is null");

				Product product = MapperService.MapperInstance.Map<Product>(dataItem);
                // TODO: plz implement and use method below in case you want to perform data encryption, or please contact DevUp for more support on this
                //if (_cryptoProvider!=null)
                //    _cryptoProvider.EncryptEntity<Product>(product, CryptoType.InTable);

                // now store the object after applying data security
				IOCContainer.Instance.ProductRepository.Create(product);
                // TODO: plz implement and use method below in case you want to add change tracking feature to your API, or please contact DevUp for more support on this
                //if (_changeTracker != null)
                //{
                //    Dictionary<string, object> data = new Dictionary<string, object>();
                //    data.Add("User", _userId);
                //    _changeTracker.SaveChange<ProductDTO>(dataItem, dataItem.Id.ToString(), ChangeType.Created, data);
                //}
				return Task.FromResult(true);
			}
			catch (DbEntityValidationException ex)
            {
                // Retrieve the error messages as a list of strings.
                var errorMessages = ex.EntityValidationErrors
                        .SelectMany(x => x.ValidationErrors)
                        .Select(x => x.ErrorMessage);

                // Join the list to a single string.
                var fullErrorMessage = string.Join("; ", errorMessages);

                // Combine the original exception message with the new one.
                var exceptionMessage = string.Concat(ex.Message, " The validation errors are: ", fullErrorMessage);

                string errorMessage = string.Format("{0}:{1}, EntityValidation Errors occured, {2}",
                    MethodBase.GetCurrentMethod().DeclaringType.Name,
                    MethodBase.GetCurrentMethod().Name,
                    exceptionMessage);

                throw new Exception(errorMessage, ex);
            }
			catch (Exception ex)
			{
				string errorMessage = string.Format("{0}:{1}, Error occured, object:{2}, {3}",
					MethodBase.GetCurrentMethod().DeclaringType.Name,
					MethodBase.GetCurrentMethod().Name,
					dataItem.Id,
					ex.Message);
				throw new Exception(errorMessage, ex);
			}
        }
		
		public Task<bool> Update(ProductDTO dataItem)
        {
           
                try
                {
                    if (dataItem == null)
                        throw new ArgumentNullException("Please provide a valid Product object to persists, the object passed is null");

                    Product product = MapperService.MapperInstance.Map<Product>(dataItem);
					// TODO: plz implement and use method below in case you want to perform data encryption, or please contact DevUp for more support on this
                	//if (_cryptoProvider!=null)
                	//    _cryptoProvider.EncryptEntity<Product>(product, CryptoType.InTable);
                    IOCContainer.Instance.ProductRepository.Update(product);
					// TODO: plz implement and use method below in case you want to perform data encryption, or please contact DevUp for more support on this
	                //if (_changeTracker != null)
	                //{
	                //    Dictionary<string, object> data = new Dictionary<string, object>();
	                //    data.Add("User", _userId);
	                //    _changeTracker.SaveChange<ProductDTO>(dataItem, dataItem.Id.ToString(), ChangeType.Modified, data);
	                //}
                    return Task.FromResult(true);
                }
				catch (DbEntityValidationException ex)
	            {
	                // Retrieve the error messages as a list of strings.
	                var errorMessages = ex.EntityValidationErrors
	                        .SelectMany(x => x.ValidationErrors)
	                        .Select(x => x.ErrorMessage);

	                // Join the list to a single string.
	                var fullErrorMessage = string.Join("; ", errorMessages);

	                // Combine the original exception message with the new one.
	                var exceptionMessage = string.Concat(ex.Message, " The validation errors are: ", fullErrorMessage);

	                string errorMessage = string.Format("{0}:{1}, EntityValidation Errors occured, {2}",
	                    MethodBase.GetCurrentMethod().DeclaringType.Name,
	                    MethodBase.GetCurrentMethod().Name,
	                    exceptionMessage);

	                throw new Exception(errorMessage, ex);
	            }
                catch (Exception ex)
                {
                    string errorMessage = string.Format("{0}:{1}, Error occured, object:{2}, {3}",
                        MethodBase.GetCurrentMethod().DeclaringType.Name,
                        MethodBase.GetCurrentMethod().Name,
                        dataItem.Id,
                        ex.Message);
                    throw new Exception(errorMessage, ex);
                }
        }


        public Task<bool> DeleteById(long id)
        {          
            try
            {
                //if (_changeTracker != null)
                //{
                //    CustomerDTO dataItem = GetById(id).Result;
                //    if (dataItem != null)
                //    {
                //        Dictionary<string, object> data = new Dictionary<string, object>();
                //        data.Add("User", _userId);
                //        _changeTracker.SaveChange<CustomerDTO>(dataItem, dataItem.Id.ToString(), ChangeType.Removed, data);
                //    }
                //}
                IOCContainer.Instance.ProductRepository.DeleteById(id);
                return Task.FromResult(true);
            }
            catch (DbEntityValidationException ex)
            {
                // Retrieve the error messages as a list of strings.
                var errorMessages = ex.EntityValidationErrors
                        .SelectMany(x => x.ValidationErrors)
                        .Select(x => x.ErrorMessage);

                // Join the list to a single string.
                var fullErrorMessage = string.Join("; ", errorMessages);

                // Combine the original exception message with the new one.
                var exceptionMessage = string.Concat(ex.Message, " The validation errors are: ", fullErrorMessage);

                string errorMessage = string.Format("{0}:{1}, EntityValidation Errors occured, {2}",
                    MethodBase.GetCurrentMethod().DeclaringType.Name,
                    MethodBase.GetCurrentMethod().Name,
                    exceptionMessage);

                throw new Exception(errorMessage, ex);
            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("{0}:{1}, Error occured, object:{2}, {3}",
                    MethodBase.GetCurrentMethod().DeclaringType.Name,
                    MethodBase.GetCurrentMethod().Name,
                    id,
                    ex.Message);
                throw new Exception(errorMessage, ex);
            }
        }

        public Task<int> GetTotal()
        {
            try
            {
                var count = IOCContainer.Instance.ProductRepository.GetTotal();
                return Task.FromResult(count);
            }
            catch (DbEntityValidationException ex)
            {
                // Retrieve the error messages as a list of strings.
                var errorMessages = ex.EntityValidationErrors
                        .SelectMany(x => x.ValidationErrors)
                        .Select(x => x.ErrorMessage);

                // Join the list to a single string.
                var fullErrorMessage = string.Join("; ", errorMessages);

                // Combine the original exception message with the new one.
                var exceptionMessage = string.Concat(ex.Message, " The validation errors are: ", fullErrorMessage);

                string errorMessage = string.Format("{0}:{1}, EntityValidation Errors occured, {2}",
                    MethodBase.GetCurrentMethod().DeclaringType.Name,
                    MethodBase.GetCurrentMethod().Name,
                    exceptionMessage);

                throw new Exception(errorMessage, ex);
            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("{0}:{1}, Error occured, object:{2}, {3}",
                    MethodBase.GetCurrentMethod().DeclaringType.Name,
                    MethodBase.GetCurrentMethod().Name,
                    0,
                    ex.Message);
                throw new Exception(errorMessage, ex);
            }
        }

        public Task<int> GetByFilterTotal(ProductFilterDTO productFilter)
        {
            try
            {
				if (productFilter == null)
                    throw new ArgumentNullException("Please provide a valid Product filter to persists, the object passed is null");

				ProductFilter filter = MapperService.MapperInstance.Map<ProductFilter>(productFilter);

                var count = IOCContainer.Instance.ProductRepository.GetByFilterTotal(filter);
                return Task.FromResult(count);
            }
            catch (DbEntityValidationException ex)
            {
                // Retrieve the error messages as a list of strings.
                var errorMessages = ex.EntityValidationErrors
                        .SelectMany(x => x.ValidationErrors)
                        .Select(x => x.ErrorMessage);

                // Join the list to a single string.
                var fullErrorMessage = string.Join("; ", errorMessages);

                // Combine the original exception message with the new one.
                var exceptionMessage = string.Concat(ex.Message, " The validation errors are: ", fullErrorMessage);

                string errorMessage = string.Format("{0}:{1}, EntityValidation Errors occured, {2}",
                    MethodBase.GetCurrentMethod().DeclaringType.Name,
                    MethodBase.GetCurrentMethod().Name,
                    exceptionMessage);

                throw new Exception(errorMessage, ex);
            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("{0}:{1}, Error occured, object:{2}, {3}",
                    MethodBase.GetCurrentMethod().DeclaringType.Name,
                    MethodBase.GetCurrentMethod().Name,
                    0,
                    ex.Message);
                throw new Exception(errorMessage, ex);
            }
        }

        // TODO: plz implement and use method below in case you want to perform data encryption, or please contact DevUp for more support on this
        /// <summary>
        /// When chaneg tracking is ON all the object changes are recoreded and its hitsory is maintained. 
        /// This method is used to fetch a particular version from the history, Please pass the id of the changetracking table record
        /// </summary>
        //public Task<ProductDTO> GetATrackedVersionByChangeTrackId(long id)
        //{
        //    try
        //    {
        //        CustomerDTO dataObject = _changeTracker.GetSavedChange<ProductDTO>(id);
        //        if (_cryptoProvider != null)
        //        {
        //            _cryptoProvider.Configure();
        //            _cryptoProvider.DecryptEntity<CustomerDTO>(dataObject, CryptoType.InTable);
        //        }
        //        return Task.FromResult(dataObject);
        //    }
        //    catch (Exception ex)
        //    {
        //        string errorMessage = string.Format("{0}:{1}, Error occured,{2}, {3}",
        //            MethodBase.GetCurrentMethod().DeclaringType.Name,
        //            MethodBase.GetCurrentMethod().Name,
        //            id,
        //            ex.Message);
        //        throw new Exception(errorMessage, ex);
        //    }
        //}
		
		

    }
}


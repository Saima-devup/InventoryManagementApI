// Code generated by DevUp technologies, 02/08/2024 14:36:01
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Diagnostics;
using System.Net;
using System.Threading.Tasks;

namespace InventoryManagementWApi.Middleware
{
    public class InvokeActionMiddleware
    {
        private readonly RequestDelegate requestDelegate;

        public InvokeActionMiddleware(RequestDelegate requestDelegate, ILogger<InvokeActionMiddleware> logger, IWebHostEnvironment environment)
        {
            this.requestDelegate = requestDelegate;
        }

        public async Task Invoke(HttpContext context)
        {
            string actionPath = $"{context.Request.Scheme}://{context.Request.Host.Value}{context.Request.Path}";
            try
            {
                //TODO please add code here in case you want  to log information about what action is going to be invoked
                Trace.WriteLine($"{actionPath} is going to be invoked");

                // invoke the controller action using the delegate
                await requestDelegate(context);

                Trace.WriteLine($"{actionPath} is invokation completed returning");
            }
            catch (Exception ex)
            {
                await ProcessException(actionPath, context, ex);
            }
        }

        private async Task ProcessException(string actionPath, HttpContext context, Exception ex)
        {
            HttpStatusCode statusCode = ex.GetType()== typeof(UnauthorizedAccessException)? HttpStatusCode.Forbidden: HttpStatusCode.InternalServerError;
            context.Response.ContentType = "application/json";
            context.Response.StatusCode = (int)statusCode;

            await context.Response.WriteAsync(System.Text.Json.JsonSerializer.Serialize(new
            {
                ErrorCode = $"{(int)statusCode}:{Convert.ToString(statusCode)}",
                ErrorPath = actionPath,
                ErrorMessage = ex.ToString(),
                ErrorDetails = ex.StackTrace,
            }));

            //TODO please add any other logging technique if you want here
        }
    }
}


// Code generated by DevUp technologies, 02/08/2024 14:36:00
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using InventoryManagementDAL.Common;

namespace InventoryManagementDAL
{
    public partial class ProductRepository : GenericRepository<Product>
    {
        public ProductRepository(InventoryManagementContext context) : base(context)
        {}
		
		 public List<Product> GetByFilter(ProductFilter productFilter)
        {
            try
            {
                if (productFilter == null)
                    throw new ArgumentException("productFilter");

                IQueryable<Product> query = (Context as InventoryManagementContext).Product;
				
								if (productFilter.CategoryId.HasValue)
					query = query.Where(x => x.CategoryId == productFilter.CategoryId);
				if (productFilter.Status.HasValue)
					query = query.Where(x => x.Status == productFilter.Status);
				if (!string.IsNullOrEmpty(productFilter.Name))
					query = query.Where(x => x.Name.Contains(productFilter.Name));

				
				query = ApplyOrderBy(query, productFilter);
                query = ApplyPagination(query, productFilter);

                return query.ToList();
            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("{0}:{1}, Error occured, object:{2}, {3}",
                        MethodBase.GetCurrentMethod().DeclaringType.Name,
                        MethodBase.GetCurrentMethod().Name,
                        0,
                        ex.Message);
                throw new Exception(errorMessage, ex);
            }
        }

        private IQueryable<Product> ApplyPagination(IQueryable<Product> query, ProductFilter productFilter)
        {
            if (productFilter.PageSize.HasValue == false || productFilter.PageSize.Value == 0)
                return query;

            int recordsToSkip = ((productFilter.PageSize ?? 0) * (productFilter.PageNumber ?? 0)) - (productFilter.PageSize ?? 0);
            query = query.Skip(recordsToSkip).Take(productFilter.PageSize ?? 0);
            return query;
        }

        private IQueryable<Product> ApplyOrderBy(IQueryable<Product> query, ProductFilter productFilter)
        {
            if (string.IsNullOrEmpty(productFilter.OrderByColumnName))
                return query;

            bool ascending = productFilter.Ascending ?? true;

            string columnName = productFilter.OrderByColumnName;
			if(columnName.Equals("Id", StringComparison.InvariantCultureIgnoreCase))
				query = ascending ? query.OrderBy(x => x.Id) : query.OrderByDescending(x => x.Id);
			if(columnName.Equals("Name", StringComparison.InvariantCultureIgnoreCase))
				query = ascending ? query.OrderBy(x => x.Name) : query.OrderByDescending(x => x.Name);
			if(columnName.Equals("CategoryId", StringComparison.InvariantCultureIgnoreCase))
				query = ascending ? query.OrderBy(x => x.CategoryId) : query.OrderByDescending(x => x.CategoryId);
			if(columnName.Equals("NetPrice", StringComparison.InvariantCultureIgnoreCase))
				query = ascending ? query.OrderBy(x => x.NetPrice) : query.OrderByDescending(x => x.NetPrice);
			if(columnName.Equals("SalesPrice", StringComparison.InvariantCultureIgnoreCase))
				query = ascending ? query.OrderBy(x => x.SalesPrice) : query.OrderByDescending(x => x.SalesPrice);
			if(columnName.Equals("StockQuantity", StringComparison.InvariantCultureIgnoreCase))
				query = ascending ? query.OrderBy(x => x.StockQuantity) : query.OrderByDescending(x => x.StockQuantity);
			if(columnName.Equals("ProductionDate", StringComparison.InvariantCultureIgnoreCase))
				query = ascending ? query.OrderBy(x => x.ProductionDate) : query.OrderByDescending(x => x.ProductionDate);
			if(columnName.Equals("Status", StringComparison.InvariantCultureIgnoreCase))
				query = ascending ? query.OrderBy(x => x.Status) : query.OrderByDescending(x => x.Status);

            return query;
        }
		
		public int GetByFilterTotal(ProductFilter productFilter)
        {
            try
            {
                if (productFilter == null)
                    throw new ArgumentException("productFilter");

                IQueryable<Product> query = (Context as InventoryManagementContext).Product;
				
								if (productFilter.CategoryId.HasValue)
					query = query.Where(x => x.CategoryId == productFilter.CategoryId);
				if (productFilter.Status.HasValue)
					query = query.Where(x => x.Status == productFilter.Status);
				if (!string.IsNullOrEmpty(productFilter.Name))
					query = query.Where(x => x.Name.Contains(productFilter.Name));

				
				return query.Count();

            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("{0}:{1}, Error occured, object:{2}, {3}",
                        MethodBase.GetCurrentMethod().DeclaringType.Name,
                        MethodBase.GetCurrentMethod().Name,
                        0,
                        ex.Message);
                throw new Exception(errorMessage, ex);
            }
        }
		
		public int GetTotal()
        {
            return (Context as InventoryManagementContext).Product.Count();
        }
    }
}

